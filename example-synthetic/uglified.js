var assert=require("assert");const USE_GOT="undefined"==typeof $http;async function grabConfig(t,e,o,s,u){const d="US"==o?"https://api.newrelic.com/graphql":"https://api.eu.newrelic.com/graphql";"undefined"!=typeof $util&&$util.insights.set("configurator",s+"-"+t);o=await(async(t,e)=>{const o={method:"POST",headers:{"Content-Type":"application/json","API-Key":u,"NewRelic-Package-Id":s},body:JSON.stringify({query:t,variables:e})};let r;var a,c,n;r=USE_GOT?await got(d,o).json():(o.url=d,a=o,c=t=>t,"timeout"in a||(a.timeout=1e4),await new Promise((r,n)=>{$http(a,function(t,e,o){t?n(`Connection error on url '${a.url}'`):200!=e.statusCode?(console.log(e.body),n("API did not respond with a 200 OK, got "+e.statusCode)):r(c(o,e,t))})}));let i={};try{return(i=null===(n=r)||"function"!=typeof n&&"object"!=typeof n?JSON.parse(r):r).errors&&0<i.errors.length&&(GQL_ERROR_DETECTED=!0,console.log("!! GQL Query error detected:",i.errors)),i}catch(t){console.log("Error: Response from New Relic failed to parse as JSON.",t)}})('query($accountId: Int!, $documentId: String!) {actor {account(id: $accountId){nerdStorage{document(collection: "SyntheticConfigurator",documentId:$documentId)}}}}',{accountId:parseInt(e),documentId:t});return JSON.parse(o.data.actor.account.nerdStorage.document.config)}USE_GOT&&(got=require("got"));